package com.thit.tibdm.sparkstream;

import com.alibaba.fastjson.JSON;
import com.thit.tibdm.NettyTransmission.client.NettyConnection;
import com.thit.tibdm.NettyTransmission.util.HashTopic;
import com.thit.tibdm.util.Config;
import com.thit.tibdm.util.HexUtil;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.Channel;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

/**
 * 解析数据的压力测试
 *
 * @author wanghaoqiang
 * @version 1.0
 * @create 2017-06-15 09:45
 **/
public class PressureTest {
    public final static Logger LOGGER = LoggerFactory.getLogger(PressureTest.class);


    @Before
    public void init() {
        Config.init();
    }

    @Test
    public void sendNetty() throws InterruptedException {
        String heart = "AA AB AC 01 00 00 00 01 02 10 00 00 05 8E 01 04 01 50 01 11 06 09 10 2A 31 02 5E 00 00 00 00 00 00 00 00 00 01 03 cb 05 00 00 00 00 00 02 06 52 00 0d 00 0e 00 0d 00 0c 00 02" +
                " 02 02 50 00 fc 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 22 22 22 22 00 22 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22 11 01 11 1f be be be 78 78 77 0f 08 05 ff 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 aa aa aa 55 01 11 00 35 35 3a 38 3a 35 0f 3a 10 3b 10 9f 10 9f 10 3b 0f 00 00 00 00 00 00 50 ff ff ff ff 50 19 19 1b 1a 1b 19 1e 1b 1c 1c 1c 1e 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 01 06 55 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 11 11 11 11 11 11 11 11" +
                " 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 55 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 06 06 06 06 06 06 06" +
                " 06 06 06 01 44 01 44 01 44 01 44 01 44 01 44 00 f0 00 f0 00 f0 00 f0 00 f0 00 10 10 10 10 10 10 01 1c 01 11 01 0d 01 0c 01 02 01 04 01 0e 01 15 01 17 01 16 01 10 00 fe 01 02 00 fa" +
                " 00 f3 00 f6 00 eb 00 ec 00 f8 00 fe 00 fe 00 fd 00 f8 00 ec 01 19 01 0d 01 06 01 0a 01 00 01 06 01 1b 01 10 01 0f 01 11 01 03 01 0a 01 11 01 14 01 12 01 13 01 0e 01 04 01 11 01 1b" +
                " 01 1d 01 14 01 0f 01 3f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 11 11 11 11 11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 50 50 50 51 51 50 50 51 53 53 51 51 53 53 52 52 53 53 52 51 53 53 51 51 53 53 52 51 53 53 51 51 52 52 50 51 52 53 51 4f 4f 4f 4f 50" +
                " 51 51 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 26 80 00 00 02 83 00 00 7d 01 00 00 48 1a 00 01 e1 d8 00 22 17 67 01 e1 ad 7b 00 00 02 3c 00 00 02 ba 02 db 02 d8 02 db 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 ff 0f 00 00 f0 cc 00 00 00 00 09 00 81 1e 0d 10 90 00 10 e8 d1 00 21 87 1c 38 e0 00 18 30 70 63 40 4f a0 01 00 30 40 62 c0 50 50 00 0c 30 90 63" +
                " 70 4f e1 00 2f d0 61 80 50 72 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00" +
                " 02 01 00 7f 00 00 00 02 01 00 e9 00 00 00 02 01 00 8b 00 00 00 02 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 51 06 07 0f ff 78 fa 01 00 01 51 06 07 0f ff" +
                " 78 fa 01 00 00 00 00 00 64 0c 39 35 00 db 18 3d 35 00 bb 18 3e 3a 00 fb 18 3e 38 00 bb 18 3d 3a 00 fb 18 39 35 00 5b 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 22 22 22 22 22 22 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 aa 53 5c c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 01 9b 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" +
                " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9C 55 BA BB BC";
        String replace = heart.replace(" ", "");
        byte[] bytes = HexUtil.hexString2Bytes(replace);
        byte[] head = new byte[16];
        System.arraycopy(bytes, 0, head, 0, 16);
        byte[] left = new byte[1412];
        System.arraycopy(bytes, 18, left, 0, 1412);
        int max = 500;
        int min = 300;
        Random random = new Random();
        Channel instance = NettyConnection.INSTANCE.getInstance();
        int i = 0;
        while (i<2) {
            i++;
            ByteBuf buf = Unpooled.buffer();
            buf.writeBytes(head);
            int l = random.nextInt(max) % (max - min + 1) + min;
            buf.writeShort(l);
            buf.writeBytes(left);
            //随机生成车号
            instance.writeAndFlush(buf);
            if (i % 60 == 0) {
                LOGGER.error("发送了多少条数据：" + i);
                Thread.sleep(500);
            }
        }

    }

    @Test
    public void createMap() {
        Map<String, String> map = new HashMap<>();
        for (int i = 500; i < 700; i++) {
            map.put(i + "", "TestProtocol--stateV2.0");
        }
        LOGGER.info(JSON.toJSONString(map));
    }

    @Test
    public void testRondom() {
        Random random = new Random();
        int l;
        for (int i = 0; i < 100; i++) {
            l = random.nextInt(500) % (500 - 450 + 1) + 450;
            LOGGER.info("随机的车号是:" + l);
            String topicparse = HashTopic.getTopic(l + "", "topicparse");
            LOGGER.info("获取的topic是：" + topicparse);
        }
    }


    @Test
    public void testBytes(){
        String s="aa ab ac 01 00 00 ab 59 02 10 00 00 05 8e 01 03 01 58 01 11 07 05 11 1b 3a 00 d4 00 00 00 00 00 00 00 00 00 01 03 cb 05 00 00 00 00 00 02 05 b4 00 0e 00 0e 00 0d 00 09 00 04 06 70 4e 00 fc 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 22 22 22 22 00 22 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22 11 01 11 1f bd be be 79 75 75 1d 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 aa aa aa 55 05 11 00 35 35 35 38 3a 30 0f 3a 10 3b 10 9f 10 9f 10 3b 0f 00 00 00 00 00 00 4e ff ff ff ff 4e 19 19 19 1a 1b 17 1e 1b 1c 1c 1b 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 01 06 55 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 55 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 00 fa 00 fa 00 fa 00 fa 00 fa 00 fa 00 fd 00 fd 00 fd 00 fd 00 fd 00 04 04 04 04 04 04 01 48 01 37 01 41 01 40 01 3c 01 40 01 3e 01 4d 01 4a 01 46 01 4a 01 3b 00 fd 00 fa 00 f7 00 f5 00 f3 00 f9 00 f4 01 03 00 ff 00 fe 01 00 00 f0 00 ef 00 f1 00 e2 00 e8 00 eb 00 ec 00 fe 00 eb 00 ed 00 e0 00 e3 00 f8 00 ea 00 f4 00 ed 00 eb 00 ea 00 de 00 df 00 ed 00 f9 00 ef 00 f8 00 ff 00 00 fd 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 11 11 11 11 11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 57 57 57 57 59 58 59 57 57 57 57 57 57 57 57 57 57 57 57 57 58 58 58 57 57 57 57 57 57 58 57 58 57 58 57 57 57 57 57 57 57 58 57 58 59 5a 57 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 b1 00 00 00 00 00 00 00 15 00 00 00 03 00 00 1c e9 00 00 0d 7f 00 3e 39 41 00 00 00 0c 00 00 00 01 00 5f 00 5f 00 5e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 0f 00 00 f0 cc 00 00 00 00 09 00 81 9e 0c 10 90 00 10 e8 c9 00 21 87 1c 38 e0 00 18 2f 70 62 10 4f 90 01 00 30 20 63 30 4f 30 00 0c 30 00 62 60 4f f1 00 2f e0 62 50 4f f2 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 02 01 00 e9 00 00 00 02 01 00 df 00 00 00 02 01 00 05 00 00 00 02 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 48 2c 07 1d 00 79 b5 08 00 01 48 2c 07 1d 00 79 b5 08 00 00 00 00 00 64 0c 39 35 00 fb 18 3d 35 00 9b 18 3e 35 00 3b 18 3e 38 00 3b 18 3d 3a 00 bb 18 39 30 00 db 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22 22 22 22 22 22 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ba bb bc c0 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 01 9bbd 9a ba bb bc";
        String replace = s.replace(" ", "");
        byte[] bytes = HexUtil.hexString2Bytes(replace);
        LOGGER.info(bytes+"'");
    }
}
